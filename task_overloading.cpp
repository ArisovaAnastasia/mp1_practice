// В задачах, приведенных ниже надо написать программы реализации классов. Эти программы должны быть представлены тремя файлами: 
// •	заголовочным файлом (.h – файлом) объявления класса и нужных типов данных,
// •	файлом описания методов класса (.cpp- файлом)
// •	файлом с функцией main, тестирующей методы класса.

// Функция main задачи должна тестировать все методы класса!
// Во всех задачах этого раздела в дополнение к требованиям, описанным в постановках задач, для каждого класса надо реализовать:
// •	Все типы конструкторов и деструктор.
// •	Должен быть реализован конструктор преобразования типов <Class>(const char* str), создающий объект из его строкового представления.
// •	Метод char* aschar() возвращающий строковое представление объекта 
// •	Перегрузку операций класса.
// •	Перегрузку операций ввода/вывода в поток.


// 1.	Задача CTime

int main()
{
	setlocale(LC_CTYPE, "Russian");	
	
	CTime t1(5, 20, 30);
	CTime t2(t1);
	CTime t3("02:24:57");

	cin >> t1;
    cout << t2;

	t2 = "2:45:32";
	t3 = t2;

	CTime C1, C2(C1), С3("2:36:46");

	C1 = C2;			
	C1 = "2:36:26";
	C2 = C1 = C3;
	C1 += C2;		
	C1 += "2:36:26";
	C1 -= C2;			
	C1 -= "2:36:26";

	C1 = C2 + C3;
	C1 = C2 + "2:36:26,28";
	C1 = "2:36:26,28" + C2;

	C1 = C3 - C2;
	C1 = C2 - "1:36:26,28";
	C1 = "2:36:26,28" - C2;

	C1 = C3 - "2:36:26,28" + C2;

    cout << (C1 > C2);
    cout << (C1 >= C2);
    cout << (C1 < C2);
    cout << (C1 <= C2);
    cout << (C1 == C2);
    cout << (C1 != C2);


	return 0;
}


// 2.	Задача CDate


int main()
{
	setlocale(LC_CTYPE, "Russian");	

	CDate d1;
    cin << d1;
	CDate d2("5.07.1978");	
	cout << "d2 = " << d2 << endl; 
	CDate d3(d1);		cout << "d3 = " << d3 << endl;
	
	// ------------------------------------------------------
	cout << " d1 = d2; -------------------------------" << endl;
	d1 = d2;
	cout << "d1 = " << d1 << endl; 

	// ------------------------------------------------------
	cout << "d1 = ""1.05.1955""; -------------------------------" << endl;
	d1 = "1.05.1955";
	cout << "d1 = " << d1 << endl;

	// ------------------------------------------------------
	d1 += 30;
	cout << "d1 = " << d1 << endl;

	// ------------------------------------------------------
	cout << "d2 = " << d2 << endl;
	d1 = d2 + 30;
	cout << "d1 = " << d1 << endl;

	// ------------------------------------------------------
	d1 -= 30;
	cout << "d1 = " << d1 << endl;

	// ------------------------------------------------------
	cout << "d2 = " << d2 << endl;
	d1 = d2 - 30;
	cout << "d1 = " << d1 << endl;
	cout << "d2 - 30 = " << d2 - 30 << endl;

	// ------------------------------------------------------
	id = d2 - "12.06.1945";
	cout << "id = " << id << endl;

	
	// ------------------------------------------------------
	int i1 = 20, i2 = 10, i3;
	cout << "d1 = " << d1 << endl;
	cout << "i1 = " << i1 << endl;
	cout << "i2 = " << i2 << endl;
	d2 = d1 + i1 + i2;
	cout << "d2 = " << d2 << endl;

	// ------------------------------------------------------
	cout << "d1 = " << d1 << endl;
	cout << "i1 = " << i1 << endl;
	cout << "i2 = " << i2 << endl;
	cout << "d3 = " << d3 << endl;
	d2 = d1 + i1 - d3 - i2;
	cout << "d2 = " << d2 << endl;

	// ------------------------------------------------------
	cout << "d1 = " << d1 << endl;
	cout << "i1 = " << i1 << endl;
	cout << "i2 = " << i2 << endl;
	cout << "d3 = " << d3 << endl;
	cout << "d4 = " << d4 << endl;
	//d2 = d1 + i1 - i2 + (d3 – d4);
	cout << "d2 = " << d2 + i1 - i2 << endl;

	// ------------------------------------------------------
    cout << (d1 >  d2);
    cout << (d1 >= d2);
    cout << (d1 <  d2);
    cout << (d1 <= d2);
    cout << (d1 == d2);
    cout << (d1 != d2);

	return 0;
}


// 3.	Класс Tmystring

class Cmystring
{
  private:	
  public:
	  char* str;  // строка
	  int size;   // размер (max)
	  int leng;   // длина реальная
  public:
	  // Конструкторы ---------------------------------
	  Cmystring(void);                  // По умолчанию
	  Cmystring(int _leng, char fill = ' ');  // Инициализатор
	  Cmystring(const Cmystring& cms);  // Копирования
	  Cmystring(const char* cstr);      // Преобразования типа
	  // Деструктор -----------------------------------
	  ~Cmystring(void);	  
	  
	  int Size() const  { return size; }
	  int Leng() const  { return leng; }
	  
	  Cmystring& operator=(const Cmystring& _str);	// операция присваивания
	  Cmystring& operator=(const char* cstr);		// операция присваивания
	  Cmystring& operator+=(const Cmystring& _str);	// операция присваивания
	  Cmystring& operator+=(const char* cstr);	// операция присваивания
	  
	  Cmystring operator+(const Cmystring& _str);	// объединение строк в стеке с возвратом объекта
	  Cmystring operator+(const char* cstr);	// операция объединения строк
	  char& operator[](int index);		// операция индексации
	  char  operator[](int index) const;	// операция индексации

	  bool operator==(const Cmystring& _str) const;	// операция сравнения
	  bool operator!=(const Cmystring& _str) const;	// операция сравнения
	  bool operator> (const Cmystring& _str) const;	// операция сравнения
	  bool operator< (const Cmystring& _str) const;	// операция сравнения
	  bool operator<=(const Cmystring& _str) const;	// операция сравнения
	  bool operator>=(const Cmystring& _str) const;	// операция сравнения

	  void DelSymbol(const char symbol = ' ');// удаление символа в строке
	  Cmystring SubStr(int p, int len) const;		// выделение подстроки
	  int Pos(const Cmystring& _str, int p) const;	// поиск подстроки

	  friend ostream& operator<<(ostream& stream, const Cmystring& _str);
	  friend istream& operator>>(istream& stream,       Cmystring& _str);

  private:	
	  int _copy(const char* cstr); // копирование строки
};
Cmystring operator+(const char* cstr, const Cmystring& _str); // операция объединения
ostream& operator<<(ostream& stream, const Cmystring& _str);
istream& operator>>(istream& stream,       Cmystring& _str);

// Задача Dictionary

// Карточка иностранного слова представляет собой структуру WordCard, содержащую иностранное слово и его перевод.
// Для моделирования электронного словаря иностранных слов реализовать класс Dictionary.
// Данный класс имеет поле-название словаря и содержит массив структур WordCard, представляющих собой карточки иностранного слова.
// Название словаря задается при создании нового словаря, но должна быть предоставлена возможность его изменения во время работы.
// Карточки добавляются в словарь и удаляются из него. Реализовать поиск определенного слова как отдельный метод.
// Аргументом операции индексирования должно быть иностранное слово. В словаре не должно быть карточек-дублей.
// Реализовать операции объединения, пересечения и вычитания словарей. При реализации должен создаваться новый словарь,
// а исходные словари не должны изменяться. При объединении новый словарь должен содержать без повторений все слова,
// содержащиеся в обоих словарях-операндах. При пересечении новый словарь должен состоять только из тех слов, которые имеются в обоих словарях-операндах.
// При вычитании новый словарь должен содержать слова первого словаря-операнда, отсутствующие во втором.
